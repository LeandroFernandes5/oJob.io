# Author: Nuno Aguiar
init:
  help: &HELP
    text   : Gets/Sets OpenAF's sBuckets.
    expects: 
    - name   : op
      desc   : "Provides the operation to perform: list; getbucket; setbucket; unsetbucket; set; setfn; setobj"
      example: list
    - name   : secrepo
      desc   : The sBucket security repository (or don't define for default)
    - name   : secbucket
      desc   : The sBucket security bucket.
    - name   : seckey
      desc   : The sBucket security bucket key.
    - name   : bucket
      desc   : The bucket string when op=setbucket

todo:
- Choose operation

ojob:
  opacks      :
  - openaf: 20210327
  catch       : logErr(exception);
  logToConsole: false   # to change when finished

jobs:
# ----------
- name: Help
  help: *HELP
  
# ----------------------
- name: Choose operation
  exec: |
    args.op = _$(args.op, "op").default("list");
    if (isDef(args.secrepo) && String(args.secrepo).length > 0) {
      args.secpass = askDef(args.secpass, "Sec repo '" + args.secrepo + "' pass: ", true);
    }

    switch(args.op.toLowerCase()) {
    case "list"       : args = $job("SBucket List", args); break;
    case "getbucket"  : args = $job("SBucket Get Bucket", args); break; 
    case "setbucket"  : args = $job("SBucket Set Bucket", args); break;
    case "unsetbucket": args = $job("SBucket UnSet Bucket", args); break;
    case "setfn"      : args = $job("SBucket SetFn", args); break;
    case "set"        : args = $job("SBucket Set", args); break;
    case "setobj"     : args = $job("SBucket SetObj", args); break;
    case "help"       : args.output = args.init.help; break;
    }

    ow.oJob.output(args.output, args);

# ------------------
- name: SBucket List
  exec: |
    args.secbucket = _$(args.secbucket, "secbucket").default(__);
    if (isDef(args.secbucket) && String(args.secbucket).length > 0) {
      args.secbucketpass = askDef(args.secbucketpass, "Sec bucket '" + args.secbucket + "' pass: ", true);
    }
    if (isDef(args.secbucket)) {
      args.output = $sec(args.secrepo, __, __, args.secpass).list(args.secbucket, args.secbucketpass);
      if (isDef(args.output[args.secbucket])) args.output = args.output[args.secbucket].sort();
    } else {
      args.output = Object.keys($sec(args.secrepo, __, __, args.secpass).list()).sort();
    }

# -----------------
- name: SBucket Get
  exec: |
    args.secbucket = _$(args.secbucket, "secbucket").$_();
    args.seckey    = _$(args.seckey, "seckey").$_();
    if (isDef(args.secbucket) && String(args.secbucket).length > 0) {
      args.secbucketpass = askDef(args.secbucketpass, "Sec bucket '" + args.secbucket + "' pass: ", true);
    }
    args.output = $sec(args.secrepo, __, __, args.secpass).get(args.seckey, args.secbucket, args.secbucketpass);

# -------------------
- name: SBucket GetFn
  exec: |
    args.secbucket = _$(args.secbucket, "secbucket").$_();
    args.seckey    = _$(args.seckey, "seckey").$_();
    if (isDef(args.secbucket) && String(args.secbucket).length > 0) {
      args.secbucketpass = askDef(args.secbucketpass, "Sec bucket '" + args.secbucket + "' pass: ", true);
    }
    args.output = $sec(args.secrepo, __, __, args.secpass).getFn(args.seckey, args.secargs, args.secbucket, args.secbucketpass);

# -----------------
- name: SBucket Set
  exec: |
    args.secbucket = _$(args.secbucket, "secbucket").$_();
    args.seckey    = _$(args.seckey, "seckey").$_();

    if (isDef(args.secbucket) && String(args.secbucket).length > 0) {
      args.secbucketpass = askDef(args.secbucketpass, "Sec bucket '" + args.secbucket + "' pass: ", true);
    }
    args.secargs = ask(" value: ");
    var t = jsonParse(args.secargs, true); 
    if (isMap(t)) args.secargs = t;

    log("Setting '" + args.seckey + "' on bucket '" + args.secbucket + "'...");
    
    $sec(args.secrepo, __, __, args.secpass).set(args.seckey, args.secargs, args.secbucket, args.secbucketpass);

# --------------------
- name: SBucket SetObj
  exec: |
    args.secbucket = _$(args.secbucket, "secbucket").$_();
    args.seckey    = _$(args.seckey, "seckey").$_();

    if (isUnDef(args.secobj)) {
      args.secobj = ask("Sec Obj: ");
    }
    if (isDef(args.secbucket) && String(args.secbucket).length > 0) {
      args.secbucketpass = askDef(args.secbucketpass, "Sec bucket '" + args.secbucket + "' pass: ", true);
    }
    try {
      log("Trying to find help odoc for '" + args.secobj + "'...");
      var ags, hsearch;
      try {
        ags = $fnDef4Help(args.secobj);
        hsearch = searchHelp(args.secobj);
      } catch(e) {
        ags = $fnDef4Help(args.secobj + "." + args.secobj);
        hsearch = searchHelp(args.secobj + "." + args.secobj);
      }
      if (args.secobj.match(/(\w+)\.(\1)/)) {
        args.secobj = args.secobj.substr(0, args.secobj.indexOf("."));
      }

      if (isArray(ags)) {
        if (isArray(hsearch) && hsearch.length > 0) {
          print("-- " + hsearch[0].fullkey + "\n-- " + (repeat(hsearch[0].fullkey.length, "-")) + "\n-- " + hsearch[0].text + "\n");
        } else {
          print("\n" + args.secobj + "(" + ags.join(", ") + ")");
        }
        args.secargs = {};
        for(var param in ags) {
          args.secargs[ags[param]] = ask(" " + ags[param] + ": ");
        }
        print("");
      }
    } catch(e) {
    }
    log("Setting object '" + args.seckey + "' with arguments for '" + args.secobj + "' on bucket '" + args.secbucket + "'...");
    $sec(args.secrepo, __, __, args.secpass).setFn(args.seckey, args.secobj, args.secargs, args.secbucket, args.secbucketpass);
    
# -------------------
- name: SBucket SetFn
  exec: |
    args.secbucket = _$(args.secbucket, "secbucket").$_();
    args.seckey    = _$(args.seckey, "seckey").$_();

    if (isUnDef(args.secfn)) {
      args.secfn = ask("Sec Fn: ");
    }
    if (isDef(args.secbucket) && String(args.secbucket).length > 0) {
      args.secbucketpass = askDef(args.secbucketpass, "Sec bucket '" + args.secbucket + "' pass: ", true);
    }
    try {
      log("Trying to find help odoc for '" + args.secfn + "'...");
      var ags = $fnDef4Help(args.secfn);
      if (args.secfn.match(/(\w+)\.(\1)/)) {
        args.secfn = args.secfn.substr(0, args.secfn.indexOf("."));
      }
      if (isArray(ags)) {
        print("\n" + args.secfn + "(" + ags.join(", ") + ")");
        args.secargs = {};
        for(var param in ags) {
          args.secargs[ags[param]] = ask(" " + ags[param] + ": ");
        }
        print("");
      }
    } catch(e) {
    }
    log("Setting '" + args.seckey + "' with arguments for '" + args.secfn + "' on bucket '" + args.secbucket + "'...");
    $sec(args.secrepo, __, __, args.secpass).setFn(args.seckey, args.secfn, args.secargs, args.secbucket, args.secbucketpass);
    
# ------------------------
- name: SBucket Get Bucket
  exec: |
    args.secbucket = _$(args.secbucket, "secbucket").$_();
    if (isDef(args.secbucket) && String(args.secbucket).length > 0) {
      args.secbucketpass = askDef(args.secbucketpass, "Sec bucket '" + args.secbucket + "' pass: ", true);
    }
    args.output = $sec(args.secrepo, __, __, args.secpass).getBucket(args.secbucket, args.secbucketpass);

# ------------------------
- name: SBucket Set Bucket
  exec: |
    args.secbucket = _$(args.secbucket, "secbucket").$_();
    args.bucket    = _$(args.bucket, "bucket").$_();
    if (isDef(args.secbucket) && String(args.secbucket).length > 0) {
      args.secbucketpass = askDef(args.secbucketpass, "Sec bucket '" + args.secbucket + "' pass: ", true);
    }
    args.output = $sec(args.secrepo, __, __, args.secpass).setBucket(args.bucket, args.secbucket, args.secbucketpass);

# --------------------------
- name: SBucket UnSet Bucket
  exec: |
    args.secbucket = _$(args.secbucket, "secbucket").$_();
    if (isDef(args.secbucket) && String(args.secbucket).length > 0) {
      args.secbucketpass = askDef(args.secbucketpass, "Sec bucket '" + args.secbucket + "' pass: ", true);
    }

    args.output = $sec(args.secrepo, __, __, args.secpass).unsetBucket(args.secbucket, args.secbucketpass);